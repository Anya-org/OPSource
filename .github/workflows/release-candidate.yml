name: Release Candidate Management

on:
  push:
    branches:
      - 'release-candidate/**'
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - 'release-candidate/**'

jobs:
  validate-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run Release Validation
        run: |
          # Version validation
          version=$(cat VERSION)
          if [[ ! $version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format in VERSION file"
            exit 1
          fi
          
          # Documentation checks
          if [ ! -f "CHANGELOG.md" ]; then
            echo "❌ CHANGELOG.md is missing"
            exit 1
          fi
          
          if ! grep -q "## \[$version\]" CHANGELOG.md; then
            echo "❌ Version $version not documented in CHANGELOG.md"
            exit 1
          fi
          
          # Run all tests
          pytest tests/ --cov=./ --cov-report=xml
          
          # Security checks
          bandit -r ./ -c pyproject.toml
          
          # Type checking
          mypy .
          
          # Style checks
          black --check .
          pylint .

      - name: Generate Release Notes
        if: success()
        run: |
          version=$(cat VERSION)
          echo "# Release Notes for v$version" > release-notes.md
          echo "" >> release-notes.md
          echo "## Changes" >> release-notes.md
          # Extract changes from CHANGELOG.md
          sed -n "/## \[$version\]/,/## \[/p" CHANGELOG.md >> release-notes.md
          
          # Save to docs
          mkdir -p docs/release-notes
          cp release-notes.md "docs/release-notes/$version.md"

      - name: Create Release PR
        if: success() && github.event_name == 'push'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const version = fs.readFileSync('VERSION', 'utf8').trim();
            const releaseNotes = fs.readFileSync('release-notes.md', 'utf8');
            
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release v${version}`,
              body: releaseNotes,
              head: process.env.GITHUB_REF,
              base: 'main',
              draft: false
            });
            
            // Add required reviewers
            await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
              reviewers: ['reviewer1', 'reviewer2'] // Replace with actual reviewers
            });

  notify-stakeholders:
    needs: validate-release
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Send Notification
        uses: actions/github-script@v6
        with:
          script: |
            const version = process.env.VERSION;
            const message = `🎉 Release candidate v${version} validation passed!\n\nPlease review the changes and approve the release PR.`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });

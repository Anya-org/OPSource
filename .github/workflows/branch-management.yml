name: Branch Management

on:
  push:
    branches:
      - development
      - 'release-candidate/**'
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main
      - development
      - 'release-candidate/**'
  schedule:
    - cron: '0 0 * * MON' # Weekly report on Monday

jobs:
  sync-branches:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Sync Development Branches
        run: |
          # Get all development branches
          git branch -r | grep 'origin/development-' | while read -r branch; do
            branch=${branch#origin/}
            git checkout $branch
            git rebase origin/development
            git push --force-with-lease
          done

  release-candidate-check:
    if: startsWith(github.ref, 'refs/heads/release-candidate/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Release Checks
        run: |
          # Version check
          version=$(cat VERSION)
          if [[ ! $version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format in VERSION file"
            exit 1
          fi
          
          # Changelog check
          if ! grep -q "## \[$version\]" CHANGELOG.md; then
            echo "Version $version not documented in CHANGELOG.md"
            exit 1
          fi
          
          # Documentation check
          if [ ! -f "docs/release-notes/$version.md" ]; then
            echo "Release notes missing for version $version"
            exit 1
          fi

      - name: Notify Reviewers
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            const reviewers = ['reviewer1', 'reviewer2'] // Replace with actual reviewers
            await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              reviewers: reviewers
            })

  weekly-report:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate Weekly Report
        run: |
          echo "# Weekly Development Report" > report.md
          echo "## Development Branches Status" >> report.md
          git branch -r | grep 'origin/development-' | while read -r branch; do
            echo "### ${branch#origin/}" >> report.md
            echo "Last commit: $(git log -1 --pretty=format:'%s' $branch)" >> report.md
            echo "Last updated: $(git log -1 --pretty=format:'%cr' $branch)" >> report.md
            echo "" >> report.md
          done
          
          echo "## Release Candidates" >> report.md
          git branch -r | grep 'origin/release-candidate/' | while read -r branch; do
            echo "### ${branch#origin/}" >> report.md
            echo "Status: $(git log -1 --pretty=format:'%s' $branch)" >> report.md
            echo "Created: $(git log -1 --pretty=format:'%cr' $branch)" >> report.md
            echo "" >> report.md
          done

      - name: Upload Report
        uses: actions/upload-artifact@v3
        with:
          name: weekly-report
          path: report.md

  update-docs:
    runs-on: ubuntu-latest
    needs: [sync-branches, release-candidate-check]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release-candidate/'))
    steps:
      - uses: actions/checkout@v3
      
      - name: Update Documentation
        run: |
          version=$(cat VERSION)
          
          # Update API documentation if it exists
          if [ -f "docs/api/generate_docs.sh" ]; then
            bash docs/api/generate_docs.sh
          fi
          
          # Update changelog if needed
          if [[ $(git status --porcelain docs/) ]]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add docs/
            git commit -m "docs: update documentation for version $version"
            git push
          fi

name: Document Manager

on:
  push:
    branches:
      - main
      - development
      - 'release-candidate/**'
    paths:
      - '**.md'
      - 'docs/**'
      - '**/CHANGELOG.md'
      - '**/ROADMAP.md'
      - 'VERSION'
      - '.github/git-config.yml'
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '**.md'
      - 'docs/**'
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight
  workflow_dispatch:

jobs:
  document-sync:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Load Git Config
        id: git-config
        run: |
          echo "::set-output name=config::$(cat .github/git-config.yml | yq -r toJson)"

      - name: Generate Documentation
        run: |
          # Run auto-generators based on schedule
          python .github/scripts/doc_manager.py --generate-all
          
      - name: Sync Documentation
        run: |
          python .github/scripts/doc_manager.py --sync
          
      - name: Setup MkDocs
        run: |
          mkdocs_config=$(echo '${{ steps.git-config.outputs.config }}' | jq -r '.documentation')
          echo "$mkdocs_config" > mkdocs.yml
          
      - name: Build Documentation Site
        run: |
          mkdocs build
          
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          publish_branch: gh-pages
          force_orphan: true
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: 'docs: update documentation site'

      - name: Create Pull Request for Documentation Updates
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'docs: automated documentation update'
          title: 'docs: automated documentation update'
          body: |
            This PR contains automated documentation updates:
            - Generated TODO report
            - Updated CHANGELOG
            - Updated ROADMAP
            - Synchronized documentation across repositories
          branch: docs/auto-update
          base: development
          labels: documentation
          draft: false

  roadmap-changelog-sync:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Process Roadmap and Changelog
        run: |
          python .github/scripts/doc_manager.py --roadmap --changelog

      - name: Create/Update Combined Documents
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            // Read combined roadmap and changelog
            const roadmap = fs.readFileSync('docs/ROADMAP.md', 'utf8');
            const changelog = fs.readFileSync('docs/CHANGELOG.md', 'utf8');
            
            // Update or create tracking issues
            const createOrUpdateIssue = async (title, body, labels) => {
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: labels,
                state: 'open'
              });
              
              if (issues.data.length > 0) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issues.data[0].number,
                  body: body
                });
              } else {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  body: body,
                  labels: labels
                });
              }
            };
            
            // Update roadmap and changelog issues
            await createOrUpdateIssue('üìã Project Roadmap', roadmap, ['roadmap', 'documentation']);
            await createOrUpdateIssue('üìù Changelog', changelog, ['changelog', 'documentation']);

  todo-integration:
    needs: [roadmap-changelog-sync]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Process TODOs
        run: |
          python .github/scripts/doc_manager.py --todos

      - name: Update Project Board
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const todos = JSON.parse(fs.readFileSync('todos.json', 'utf8'));
            
            // Create project items for each TODO
            for (const todo of todos) {
              // Map TODO priority to project column
              const column = {
                critical: 'To Do (Critical)',
                high: 'To Do (High)',
                normal: 'To Do',
                low: 'Backlog'
              }[todo.priority];
              
              // Create or update project item
              // Note: This requires the project API beta
              await github.rest.projects.createCard({
                column_id: column,
                note: `${todo.type}: ${todo.text}\nFile: ${todo.file}:${todo.line}`
              });
            }

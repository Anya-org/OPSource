use prometheus::{register_counter_vec, register_gauge_vec, register_histogram_vec, CounterVec, GaugeVec, HistogramVec};
use std::error::Error;

pub struct AgentMetrics {
    agent_count: GaugeVec,
    task_processing_time: HistogramVec,
    actions_generated: CounterVec,
    task_completion: CounterVec,
    agent_registrations: CounterVec,
}

impl AgentMetrics {
    pub fn new() -> Result<Self, Box<dyn Error>> {
        let agent_count = register_gauge_vec!(
            "ai_agent_count",
            "Number of active AI agents",
            &["agent_type"]
        )?;

        let task_processing_time = register_histogram_vec!(
            "ai_task_processing_seconds",
            "Time taken to process tasks",
            &["agent_id"]
        )?;

        let actions_generated = register_counter_vec!(
            "ai_actions_generated_total",
            "Total number of actions generated by agents",
            &["agent_id"]
        )?;

        let task_completion = register_counter_vec!(
            "ai_task_completion_total",
            "Total number of completed tasks",
            &["task_type"]
        )?;

        let agent_registrations = register_counter_vec!(
            "ai_agent_registrations_total",
            "Total number of agent registrations",
            &["agent_id"]
        )?;

        Ok(Self {
            agent_count,
            task_processing_time,
            actions_generated,
            task_completion,
            agent_registrations,
        })
    }

    pub fn record_task_processing_time(&self, agent_id: &str, duration: f64) {
        self.task_processing_time
            .with_label_values(&[agent_id])
            .observe(duration);
    }

    pub fn record_actions_generated(&self, agent_id: &str, count: f64) {
        self.actions_generated
            .with_label_values(&[agent_id])
            .inc_by(count);
    }

    pub fn record_task_completion(&self, task_type: &str) {
        self.task_completion
            .with_label_values(&[task_type])
            .inc();
    }

    pub fn record_agent_registration(&self, agent_id: &str) {
        self.agent_registrations
            .with_label_values(&[agent_id])
            .inc();
        
        // Update active agent count
        self.agent_count
            .with_label_values(&["active"])
            .inc();
    }

    pub fn record_agent_deregistration(&self, agent_type: &str) {
        self.agent_count
            .with_label_values(&[agent_type])
            .dec();
    }
}
